{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"p",
				"print"
			],
			[
				"api",
				"api_key_list"
			],
			[
				"g",
				"google_driving_url"
			],
			[
				"wa",
				"google_walking_url"
			],
			[
				"goo",
				"google_driving_url"
			],
			[
				"find",
				"find_google_result"
			],
			[
				"driving",
				"driving_result"
			],
			[
				"false",
				"False"
			],
			[
				"or",
				"orig_name"
			],
			[
				"walking",
				"walking_result"
			],
			[
				"dri",
				"driving_result"
			],
			[
				"check",
				"check_api_key"
			],
			[
				"goog",
				"google_driving_time"
			],
			[
				"google_d",
				"google_driving_url"
			],
			[
				"time",
				"time_spent"
			],
			[
				"go",
				"google_walking_url"
			],
			[
				"dest_n",
				"destination_addresses"
			],
			[
				"wal",
				"walking_result"
			],
			[
				"dr",
				"driving_result"
			],
			[
				"des",
				"dest_name"
			],
			[
				"num",
				"number_one"
			],
			[
				"med",
				"medium_"
			],
			[
				"dat",
				"day_trip_id"
			],
			[
				"event",
				"event_ids"
			],
			[
				"day",
				"day_order"
			],
			[
				"coun",
				"county_list_info"
			],
			[
				"ad",
				"adjusted_time"
			],
			[
				"pi",
				"points"
			],
			[
				"city",
				"city_name"
			],
			[
				"raw",
				"raw_to_adjust_time"
			],
			[
				"BS",
				"BeautifulSoup"
			],
			[
				"ap",
				"api_list"
			],
			[
				"erro",
				"error_message"
			],
			[
				"input",
				"input_list"
			],
			[
				"state",
				"state_error"
			],
			[
				"abb2",
				"abb2state_dict"
			],
			[
				"poi",
				"poi_detail_state_park"
			],
			[
				"in",
				"input_shape"
			],
			[
				"y_",
				"y_train"
			],
			[
				"va",
				"validation_loss"
			],
			[
				"loss",
				"loss_operation"
			],
			[
				"tra",
				"train_test_split"
			],
			[
				"V",
				"Variable"
			],
			[
				"n",
				"n_labels"
			],
			[
				"labe",
				"label_test"
			],
			[
				"re",
				"recall_score"
			],
			[
				"pre",
				"precision_score"
			],
			[
				"true",
				"true_positive"
			],
			[
				"feature",
				"feature_test"
			],
			[
				"accy",
				"accuracy_score"
			],
			[
				"fea",
				"features"
			],
			[
				"c",
				"components_"
			],
			[
				"top",
				"top_feature"
			],
			[
				"la",
				"labels_train"
			],
			[
				"fe",
				"features_train"
			],
			[
				"lab",
				"labels_test"
			],
			[
				"acc",
				"accuracy_score"
			],
			[
				"ba",
				"bag_of_words"
			],
			[
				"fr",
				"from_data"
			],
			[
				"word",
				"word_data"
			],
			[
				"un",
				"unwanted_word"
			],
			[
				"from",
				"from_data"
			],
			[
				"pa",
				"parseOutText"
			],
			[
				"all_",
				"all_words"
			],
			[
				"text",
				"text_string"
			],
			[
				"sc",
				"scaler"
			],
			[
				"f",
				"feature_1"
			],
			[
				"a",
				"a"
			],
			[
				"fin",
				"find_max_min"
			],
			[
				"item",
				"item_min"
			],
			[
				"ite",
				"item_list"
			],
			[
				"fear",
				"features_list"
			],
			[
				"min",
				"min_stock_option"
			],
			[
				"max",
				"max_stock_option"
			],
			[
				"sto",
				"stock_option"
			],
			[
				"data",
				"data_dict"
			],
			[
				"da",
				"data_dict"
			],
			[
				"b",
				"bonus"
			],
			[
				"net",
				"net_worths_test"
			],
			[
				"age",
				"ages_test"
			],
			[
				"new",
				"net_worths_train"
			],
			[
				"ages",
				"ages_train"
			],
			[
				"tar",
				"target_test"
			],
			[
				"target",
				"target_train"
			],
			[
				"ta",
				"target_train"
			]
		]
	},
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 372.0,
		"last_filter": "inst",
		"selected_items":
		[
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"Pack",
				"Package Control: Install Package"
			]
		],
		"width": 521.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/Gon/Desktop/travel_with_friends/helpers.py",
		"/Users/Gon/Desktop/travel_with_friends/init_db.py",
		"/Users/Gon/Desktop/travel_with_friends/init_outside_db.py",
		"/Users/Gon/Desktop/travel_with_friends/outside_helpers.py",
		"/Users/Gon/Desktop/travel_with_friends/outside_trip.py",
		"/Users/Gon/Desktop/travel_with_friends/goal.py",
		"/Users/Gon/Desktop/travel_with_friends/running.py",
		"/Users/Gon/Desktop/travel_with_friends/city_trip.py",
		"/Users/Gon/Desktop/travel_with_friends/web_scraping_tripadvisor.py",
		"/Users/Gon/Desktop/travel_with_friends/api_key_list.config",
		"/Users/Gon/Desktop/travel_with_friends/us_cities_states_counties.csv",
		"/Users/Gon/Desktop/travel_with_friends/distance.py",
		"/Users/Gon/Desktop/travel_with_friends/poi_detail_table_final_v1.csv",
		"/Users/Gon/Desktop/travel_with_friends/us_state_abbrevation.py",
		"/Users/Gon/Desktop/travel_with_friends/tripadvisor_attractions.py",
		"/Users/Gon/Desktop/travel_with_friends/s2.html",
		"/Users/Gon/Desktop/NLP_project/ec_helpers.py",
		"/Users/Gon/Desktop/NLP_project/ec_train.py",
		"/Users/Gon/Desktop/NLP_project/train_set.csv",
		"/Users/Gon/Desktop/NLP_project/test_set.csv",
		"/Users/Gon/Desktop/travel_with_friends/.git/MERGE_MSG",
		"/usr/local/etc/mongod.conf",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/behavioral_cloning/project 3/model.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/behavioral_cloning/project 3/drive.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/behavioral_cloning/CarND-Transfer-Learning-lab/feature_extraction.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/behavioral_cloning/CarND-Transfer-Learning-lab/feature_extraction_solution.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/behavioral_cloning/CarND-Alexnet-Feature-Extraction/train_feature_extraction.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/behavioral_cloning/CarND-Alexnet-Feature-Extraction/feature_extraction.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/behavioral_cloning/CarND-Alexnet-Feature-Extraction/traffic_sign_inference.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/behavioral_cloning/CarND-Alexnet-Feature-Extraction/imagenet_inference.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/behavioral_cloning/CarND-Alexnet-Feature-Extraction/bvlc-alexnet.npy",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/behavioral_cloning/CarND-Alexnet-Feature-Extraction/caffe_classes.py",
		"/Users/Gon/.keras/keras.json",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/tensorflow/Helloworld_tensorflow.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/tensorflow/tf_math.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/miniflow/miniflow_start.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/evaluation/evaluate_poi_identifier.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/validation/validate_poi.py",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/find_lane_lines/color_selection",
		"/Users/Gon/Desktop/Udacity/Self_driving_car/find_lane_lines/Color_selection",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/feature_selection/poi_flag_email.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/feature_selection/find_signature.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/pca/eigenfaces.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/text_learning/vectorize_text.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/feature_selection/compute_Fraction.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/tools/feature_format.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/text_learning/prepare_text_for_ml.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/tools/parse_out_email_text.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/text_learning/stopword.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/max_min_rescale.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/k_means/k_means_cluster.py",
		"/Users/Gon/.bash_rc",
		"/Users/Gon/.bash_profile",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/final_project/enron61702insiderpay.pdf",
		"/Users/Gon/.bash_profile-anaconda.bak",
		"/Users/Gon/.bash_profile-anaconda3.bak",
		"/Users/Gon/.bash_history",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/outliers/outlier_cleaner.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/outliers/outlier_removal_regression.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/outliers/enron_outliers.py",
		"/Users/Gon/Desktop/Udacity/Data_Analyst_ND/lesson5/ud120-projects/regression/finance_regression.py",
		"/regression",
		"/Users/Gon/Desktop/Udacity/data_analysis/lesson5/ud120-projects/regression/finance_regression.py",
		"/Users/Gon/.ssh/id_rsa",
		"/usr/local/git",
		"/usr/local/config",
		"/Users/Gon/Desktop/.gitignore"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"db_s",
			"print",
			"geopy_dist",
			"destination_addresses",
			"one",
			"already",
			"tuple(",
			"db_re",
			"distance",
			"continue",
			"pass",
			"break",
			"np",
			"geopy_dist",
			"to_csv",
			"us_state_abbrev",
			"us_state_abbrevation",
			"40",
			"import",
			"BATCH_SIZE",
			"cross"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 230.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 222.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
